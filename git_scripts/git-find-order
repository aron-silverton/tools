#!/usr/bin/env python

import re
import sys
import time
import datetime
from argparse import ArgumentParser

try:
	from git import Repo
except ImportError:
	print "Please Install GitPython Package (e.g. yum install GitPython)"
	sys.exit(1)

class git_find_order(object):

	def get_parser(self):
		if not hasattr(self, 'parser'):
			self.parser = ArgumentParser()
		return self.parser

	def parse_args(self, args):
		self.Parser.add_argument('-r', '--local_range', help='Local kernel tree range of commits', required=True)
		self.Parser.add_argument('-u', '--upstream_kernel_path', help='Path to upsream kernel tree', required=True)
		self.Parser.add_argument('-l', '--local_kernel_path', help='Local kernel tree path', required=True);
		self.Parser.parse_args(namespace=self, args=args)

	def get_upstream_repo(self):
		if not hasattr(self, 'upstream_repo'):
			self.upstream_repo = Repo(self.upstream_kernel_path)
		return self.upstream_repo

	def get_local_repo(self):
		if not hasattr(self, 'local_repo'):
			self.local_repo = Repo(self.local_kernel_path)
		return self.local_repo

	def get_upstream_commits(self):
		return self.UpstreamRepo.iter_commits(no_merges=True, reverse=False)

	def get_local_commits(self):
		return self.LocalRepo.iter_commits(self.local_range, no_merges=True, reverse=False)

	def get_upstream_tag(self, commit):
		tag = self.UpstreamRepo.git.describe(["--tags", "--contains" ,commit.hexsha])
		return tag.partition("~")[0]

	def get_sorted_list(self):
		upstream_commits = list(self.get_upstream_commits())
		local_commits = list(self.get_local_commits())
		print "Searching for total amount of %d patches" % (len(local_commits))
		#print "Upstream commits size : %d" % (len(upstream_commits))
		sorted_dict = dict()
		for local_commit in local_commits:
			local_description = (local_commit.summary).split(":", 1)[1]
			#print "Searching for %s" %(local_description)
			key = 1
			for upstream_commit in upstream_commits:
				if local_description in upstream_commit.summary:
					#print "Updated sorted_dict[%d] = %s # %s" % (key, upstream_commit, upstream_commit.summary)
					sorted_dict[key] = upstream_commit
					break
				key = key + 1

		print "Found %d/%d patches:" % (len(sorted_dict), len(local_commits))
		for key, commit in sorted(sorted_dict.items()):
			print "%s # %s (%s, %s)" % (commit, commit.summary, self.get_upstream_tag(commit), \
						    time.strftime("%a, %d %b %Y %H:%M:%S", time.gmtime(commit.committed_date)))

	def execute(self, args):
		self.parse_args(args)
		self.get_sorted_list()

	Parser = property(get_parser)
	UpstreamRepo = property(get_upstream_repo)
	LocalRepo = property(get_local_repo)

if __name__ == '__main__':
	sorted_git_log = git_find_order()
	sorted_git_log.execute(sys.argv[1:])
